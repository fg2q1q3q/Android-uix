apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
//apply plugin: 'kotlin-android-extensions'
//apply plugin: 'com.github.panpf.bintray-publish'
apply plugin: 'maven-publish'
apply plugin: 'signing'

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        externalNativeBuild {
            cmake {
                cppFlags "-std=c++1z -frtti -fexceptions -lz"
                abiFilters 'armeabi-v7a', "arm64-v8a"/*, 'x86'*/
                arguments '-DANDROID_STL=gnustl_shared'
            }
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    externalNativeBuild {
        cmake {
            path "CMakeLists.txt"
        }
    }
}

dependencies {
    implementation "com.android.support:appcompat-v7:$supportLibVersion"
    api "com.github.Shouheng88:uix-common:${rootProject.ext.releaseVersion}"
//    api project(path: ':uix-common')
}

//publish {
//    userOrg = 'easymark'
//    groupId = 'me.shouheng.ui'
//    artifactId = 'uix-image'
//    repoName = 'Android'
//    publishVersion = rootProject.ext.releaseVersion
//    desc = 'Ui component, the image process subset for Android.'
//    website = 'https://github.com/Shouheng88/Android-uix'
//}

task androidSourcesJar(type: Jar) {
    archiveClassifier.set("sources")
    from android.sourceSets.main.java.source
    exclude "**/R.class"
    exclude "**/BuildConfig.class"
}

publishing {
    // 定义发布什么
    publications {
        mavenJava(MavenPublication) {
            groupId 'com.github.Shouheng88'
            artifactId 'uix-image'
            version rootProject.ext.releaseVersion
            // Two artifacts, the `aar` and the sources
            artifact("$buildDir/outputs/aar/${project.getName()}-release.aar")
            artifact androidSourcesJar
            pom {
                // 构件名称，区别于 artifactId，可以理解为 artifactName
                name = 'uix-image'
                // 构件描述
                description = 'Android UIX'
                // 构件主页
                url = 'https://github.com/Shouheng88/Android-uix'
                // 许可证名称和地址
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                // 开发者信息
                developers {
                    developer {
                        name = 'ShouHeng'
                        email = 'shouheng2015@gmail.com'
                    }
                }
                // 版本控制仓库地址
                scm {
                    url = 'https://github.com/Shouheng88/Android-uix'
                    connection = 'scm:git:github.com/Shouheng88/Android-uix.git'
                    developerConnection = 'scm:git:ssh://git@github.com/Shouheng88/Android-uix.git'
                }
                // A slightly hacky fix so that your POM will include any transitive dependencies
                // that your library builds upon
                withXml {
                    def dependenciesNode = asNode().appendNode('dependencies')
                    project.configurations.all { configuration ->
                        def name = configuration.name
                        if (name != "implementation" && name != "compile" && name != "api") {
                            return
                        }
                        println(configuration)
                        configuration.dependencies.each {
                            println(it)
                            def dependencyNode = dependenciesNode.appendNode('dependency')
                            if (it.name == "unspecified") {
                                // 忽略无法识别的
                                return
                            }
                            dependencyNode.appendNode('groupId', it.group)
                            dependencyNode.appendNode('artifactId', it.name)
                            dependencyNode.appendNode('version', it.version)
                            if (name == "api" || name == "compile") {
                                dependencyNode.appendNode("scope", "compile")
                            } else { // implementation
                                dependencyNode.appendNode("scope", "runtime")
                            }
                        }
                    }
                }
            }
        }
    }
    // 定义发布到哪里
    repositories {
        maven {
            def releasesRepoUrl = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
            def snapshotsRepoUrl = "https://s01.oss.sonatype.org/content/repositories/snapshots/"
            // You only need this if you want to publish snapshots, otherwise just set the URL
            // to the release repo directly
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            credentials {
                // 这里就是之前在 issues.sonatype.org 注册的账号
                username ossrhUsername
                password ossrhPassword
            }
        }
    }
}

signing {
    sign publishing.publications
}
